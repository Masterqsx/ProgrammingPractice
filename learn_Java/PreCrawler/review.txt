On my shelves I probably have 75% of the books Rod Stephens has written over the years. A large body of work that I have collected because they are always useful. I own the Visual Basic 6 Bug Proofing book and assumed that the Beginning Software Engineering book would be in a similar vein, just not specific to one language. This is a much more expansive book that for someone writing software for twenty plus years, I can find sage advice and ways to improve what we are currently doing for QA/QC and developmental processes. The text is kept readable by drawing upon the experiences of the author as examples. Sure the beginner will be well prepared by reading this, but veterans are likely to find at least one thing in here, that is well explained, that you can adopt to improve your established software engineering process. In other words if you are writing software, buy a copy, read it, use it. The author makes a very valid point that you need to spend the money on good software tools for software developers. That investment compared to the money developers receive for the hours they work is money well spent. Same goes for this book. Well worth the investment of money and time to read it IF you use the guidance to conduct, manage and run projects it provides.

(A preamble to the notion of Software Engineering). Software Engineering, is an arcane, heady topic, with swimming pools of ink, and several forests of paper dedicated to it, during the last 35 years or so. It is more of a belief system than an engineering discipline, or as an electrical engineer once said to me in 1973 “witchcraft”.  (For 1973 he was correct!) This book was a stroll down memory lane for me, because I have been a developer since 1972, and still going strong (geriatric) today. I have been strongly attracted toward some of the techniques and organization of, or methodology for developing software. I have read most of the original tomes as they were first written, and I still have most of them. Ron’s book is rather small considering what it covers.<br />Ron Stevens illustrates how it should be done, where most of the stakes should be driven into the ground, and in most cases, several variations and techniques for each phase. All of these have their pluses and minuses. The worst solution is not to choose any. You will come away with the notion that software engineering perpetuates massive paper work, and it does, or more likely it did. If you piled up all the blueprints of the space shuttle, or plotted out all the traces on the latest CPU chip, the Amazon rain forest would be diminished by the size of Rhode Island. Yet these requirements are accommodated in other engineering disciplines. Software engineering is everything you wanted to know about building a small modular city of code. All of the questions asked and answered, designed and laid out. Now, on with it.<br />Question: “Is Sofia Loren attractive?” Answer: “She weighs 54480 grams!” Is the White Star Liner “Titanic” big? She has more life boats than any other passenger liner! What is the spectral wavelength of the color “purple?” Questions asked and answered with real facts or metrics. The story about the seven blind men examining an elephant with their hands, and coming away with seven different answers and impressions about the elephant, depending on where they were standing, sums it up out side of formal documents.<br />Software development is more of an art form, than say, electrical engineering, or mechanical engineering. Software engineering is the building of a text blue print or text circuit schematic which is the guide to the construction of software. Software is implemented in text, in response to a stated need, which can be interpreted in many different ways. Ron’s chapters guide you through all the various stages and levels, and specifies the various techniques which address these issues.<br />I have at least five of Rod Stevens books and the code in in his books is outstanding (or at least his code style and organization can be on anyone’s short list.) I got this book on the pre-order form and sat down and read it back to back. Twice. Rod’s engineering book is outstanding also, being more of a tour guide through the battlefield of techniques and applications of code development. Most of the battles are about which technique is “better” but all are subjective and have valid points.<br />Rod starts out with a high level observation of software development illustrating the steps: requirements, high level design, low level design, development, testing, deployment, maintenance, and wrap up.<br />He then proceeds through all the steps just enumerated above, with all the software packages of tools which more or less help the process along the way. “More or less” was not sarcastic, for these packages are good at implementing the scope of what they do, but like the blind men and the elephant you come away with that particular measurement on that particular measuring context.<br />Rod’s style of writing in this book is darkly humorous and on occasion sarcastic.  Some of his examples of metrics are “number of programmer trips to the coffee pot”, which is in the same spirit of meetings “where the minutes are kept, but the hours are lost.”  Books about engineering are as lively as watching paint dry, so this relief is necessary. The topics are covered very well with examples following nearly all the sections.<br />Software Engineering using the methodologies in the book would advance development enormously and projects would be less expensive. Software Engineering’s problems are mostly political (office or corporate). Management wants results at the smallest cost. Developers want to know what they are building. Both parties are guilty of not committing to paper what is necessary invoking the clich&eacute; “by the book” in meetings but avoidance outside the meeting room, (actually Rod Stevens book, or parts of the book, would be the stake in the ground) to improve their chances to be more successful and software projects.<br />In the spirit of Sophia’s weight, and the Titanic’s life boat count, and the color purple, committing these metrics to paper will set them in a context which they deserve. The measure of &#34;attractive&#34; in grams has its counter part in program complexity in &#34;lines of code&#34;.<br />Everyone in the United States is the end user of software, knowing or unknowingly. When you see a piece of magnificent software on your PC admire the fortitude it took to following some or all of Ron’s collected methodologies or the sheer person power ([Mongolian hoard], a term used to indicate throwing a cast of 1000s, 100s, or 10s of tough, driven, code warriors, and overrun the problem, by shear human weight) to achieve results.  Read the book to see the directed journey that needs to be taken to get an idea for a program in your head, to an Icon on your PC desktop.

This book is great and explains that basics for software engineering. Thanks to this book, I was able to refresh my memory and landed a great steady job by acing the interview. Highly recommended.

nice book, great points, kind of skips around on this book that is covering a broad range of topics.  I think this should really be 3 books in the least.


